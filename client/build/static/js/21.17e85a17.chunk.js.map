{"version":3,"sources":["Components/Inventory/InvtryLogin/InvtryLogin.jsx"],"names":["InvtryLogin","Credentials","useSelector","state","EmpAuth","EmployeeData","history","useHistory","encryptor","require","useState","LoginID","LoginPass","UserData","setUserData","OnChangeHandler","e","target","name","value","setValues","sessionStorage","getItem","replace","className","onSubmit","preventDefault","decrypt","login_id","emp_password","spoken","say","toast","dark","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","setItem","emp_id","setTimeout","type","placeholder","onChange","minLength","required"],"mappings":"kfAmHeA,UAxGK,WAEhB,IAAMC,EAAcC,aAAa,SAAEC,GAAF,OAAaA,EAAMC,QAAQC,gBAGtDC,EAAUC,cAEVC,EAAYC,EAAQ,IAARA,CADR,8CAGV,EAAkCC,mBAC9B,CACIC,QAAS,GAAIC,UAAW,KAFhC,mBAAQC,EAAR,KAAkBC,EAAlB,KAOMC,EAAkB,SAAEC,GAEtB,MAAwBA,EAAEC,OAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACRC,EAAS,2BACRP,GADQ,kBAEVK,EAAOC,IAGZL,EAAYM,IA6DhB,OAJIC,eAAeC,QAAQ,gBACvBhB,EAAQiB,QAAQ,WAIhB,qCACI,cAAC,IAAD,IACA,qBAAKC,UAAU,eAAf,SACI,qBAAKA,UAAU,uBAAf,SACI,uBAAMC,SA7DF,SAAET,GAElBA,EAAEU,iBACEb,EAASF,UAAYH,EAAUmB,QAAQ1B,EAAY2B,UAE/Cf,EAASD,YAAcJ,EAAUmB,QAAQ1B,EAAY4B,eAErDC,IAAOC,IAAI,8BACXC,IAAMC,KAAK,gBAAiB,CACxBC,SAAU,aACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,IAGdpB,eAAeqB,QAAQ,cAAezC,EAAY0C,QAElDC,YAAW,WACPtC,EAAQiB,QAAQ,aACjB,OAGHO,IAAOC,IAAI,wBACXC,IAAMC,KAAK,uBAAwB,CAC/BC,SAAU,aACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,MAKlBX,IAAOC,IAAI,2BACXC,IAAMC,KAAK,0BAA2B,CAClCC,SAAU,gBACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,MAeN,UACI,oBAAIjB,UAAU,kCAAd,6BACA,uBAAOqB,KAAK,OAAOrB,UAAU,eAAesB,YAAY,WAAW3B,MAAQN,EAASF,QAAUoC,SAAWhC,EAAkBG,KAAK,UAAU8B,UAAU,IAAIC,UAAQ,IAChK,uBAAOJ,KAAK,WAAWrB,UAAU,eAAesB,YAAY,WAAW3B,MAAQN,EAASD,UAAYmC,SAAWhC,EAAkBG,KAAK,YAAY8B,UAAU,IAAIC,UAAQ,IACxK,wBAAQzB,UAAU,MAAlB","file":"static/js/21.17e85a17.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport './InvtryLogin.css';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport spoken from '../../../../node_modules/spoken/build/spoken';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst InvtryLogin = () => {\r\n\r\n    const Credentials = useSelector( ( state ) => state.EmpAuth.EmployeeData );\r\n\r\n    // To change URL\r\n    const history = useHistory();\r\n    let key = 'real secret keys should be long and random';\r\n    const encryptor = require('simple-encryptor')(key);\r\n\r\n    const [ UserData, setUserData ] = useState(\r\n        {\r\n            LoginID: '', LoginPass: ''\r\n        }\r\n    );\r\n\r\n    // Call on change function to store input field data into usestate()\r\n    const OnChangeHandler = ( e ) => {\r\n\r\n        const { name, value } = e.target;\r\n        const setValues = {\r\n            ...UserData,\r\n            [name]: value\r\n        }\r\n\r\n        setUserData(setValues);\r\n\r\n    }\r\n\r\n    // On form submition, the following function call\r\n    const OnUserLogin = ( e ) => {\r\n\r\n        e.preventDefault();\r\n        if( UserData.LoginID === encryptor.decrypt(Credentials.login_id) )\r\n        {\r\n            if (UserData.LoginPass === encryptor.decrypt(Credentials.emp_password)) \r\n            {\r\n                spoken.say('Login success. Please wait');\r\n                toast.dark(\"Login success\", {\r\n                    position: 'top-center',\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n\r\n                sessionStorage.setItem('InvtryEmpID', Credentials.emp_id);\r\n\r\n                setTimeout(() => {\r\n                    history.replace('/invtry')\r\n                }, 3000);\r\n            }else\r\n            {\r\n                spoken.say('Password Not Matched');\r\n                toast.dark(\"Password Not Matched\", {\r\n                    position: 'top-center',\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n            }\r\n        }else\r\n        {\r\n            spoken.say('Login ID is not correct');\r\n            toast.dark(\"Login ID is not correct\", {\r\n                position: 'bottom-center',\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    if (sessionStorage.getItem('InvtryEmpID')) {\r\n        history.replace('/invtry');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ToastContainer />\r\n            <div className=\"invtry_Login\">\r\n                <div className=\"invtry_Login-content\">\r\n                    <form onSubmit={  OnUserLogin }>\r\n                        <h1 className=\"text-uppercase text-center mb-4\">Inventory Login</h1>\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Login ID\" value={ UserData.LoginID } onChange={ OnChangeHandler } name=\"LoginID\" minLength=\"3\" required />\r\n                        <input type=\"password\" className=\"form-control\" placeholder=\"Password\" value={ UserData.LoginPass } onChange={ OnChangeHandler } name=\"LoginPass\" minLength=\"3\" required />\r\n                        <button className=\"btn\">Login</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default InvtryLogin;"],"sourceRoot":""}