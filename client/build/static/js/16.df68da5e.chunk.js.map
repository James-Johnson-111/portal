{"version":3,"sources":["Redux/Actions/Action.js","Components/EmployeeProtal/Auth/Login/frmLogin.jsx","Components/EmployeeProtal/Auth/Login/Login.jsx","io.js"],"names":["EmployeeLogin","data","type","payload","ShowSideBar","Condition","frmLogin","props","className","xmlns","viewBox","fill","d","onClick","LoginShow","onSubmit","Login_Div2","value","UserData","LoginID","onChange","OnChangeHandler","name","required","id","label","variant","style","backgroundColor","color","OnUserLogin","LoginPass","autoComplete","Employee_Login","history","useHistory","encryptor","require","dispatch","useDispatch","useState","Email","Name","setUserData","RememberMe","StartLoading","setStartLoading","useEffect","$","hide","sessionStorage","getItem","replace","Loading","display","e","preventDefault","push","axios","get","then","response","x","length","decrypt","login_id","fadeOut","fadeIn","show","css","html","catch","error","toast","dark","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","target","setValues","employees","emp_password","FormData","date","Date","append","emp_id","post","res","employee","socket","emit","on","result","err","rslt","app_status","console","log","setItem","setTimeout","monthNames","localStorage","names","JSON","parse","loginID","includes","prevData","img","emp_image","email","getDate","getMonth","getFullYear","stringify","io","connect","autoConnect"],"mappings":"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","file":"static/js/16.df68da5e.chunk.js","sourcesContent":["export const EmployeeLogin = ( data ) => {\r\n\r\n    return {\r\n        type: \"EMPLOGIN\",\r\n        payload: {\r\n            data: data\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const ShowSideBar = ( Condition ) => {\r\n\r\n    return {\r\n        type: \"SHOWSIDEBAR\",\r\n        payload: {\r\n            data: Condition\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const Chatbot = ( message ) => {\r\n\r\n    return {\r\n        type: \"CHATBOT\",\r\n        payload: {\r\n            data: message\r\n        }\r\n    }\r\n\r\n}","import React from 'react';\r\n\r\nfunction frmLogin(props) {\r\n    return (\r\n        <>\r\n\r\n            <div className=\"Emp_Login2\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\"><path fill=\"rgb(26, 34, 38)\" fill-opacity=\"1\" d=\"M0,160L120,181.3C240,203,480,245,720,245.3C960,245,1200,203,1320,181.3L1440,160L1440,0L1320,0C1200,0,960,0,720,0C480,0,240,0,120,0L0,0Z\"></path></svg>\r\n                <div className=\"Emp_Login2_Div\">\r\n                <h1 className=\"font-weight-bolder text-center\">SEABOARD</h1>\r\n                    <div className=\"Emp_Login2_Div_Box\">\r\n                        <div className=\"Emp_Login2_Grid\">\r\n                            <div className=\"ClickDiv1\" onClick={props.LoginShow}>\r\n                                <p className=\"mb-0\">Login Id</p>\r\n                            </div>\r\n                            <div className=\"ClickDiv2\">\r\n                                <p className=\"mb-0\">Password</p>\r\n                            </div>\r\n                            <div className=\"HideDiv\">\r\n                                <p className=\"mb-0\">Login Id</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"LoginDiv\">\r\n                            <form onSubmit={props.Login_Div2}>\r\n                                <input className=\"w-100 mb-3 form-control border bg-light\" value={props.UserData.LoginID} onChange={props.OnChangeHandler} name=\"LoginID\" required id=\"standard-basic\" label=\"Login Id\" variant=\"standard\" />\r\n                                <div className=\"w-100 text-right py-3\">\r\n                                    <button type='submit' variant=\"contained\" className=\"w-100 btn\" style={{ backgroundColor: \"#0db8de\", color: \"white\" }}>Next</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                        <div className=\"PassDiv\">\r\n                            <form onSubmit={props.OnUserLogin}>\r\n                                <input className=\"w-100 mb-3 form-control border bg-light\" value={props.UserData.LoginPass} onChange={props.OnChangeHandler} name=\"LoginPass\" required label=\"Password\" type=\"password\" autoComplete=\"current-password\" variant=\"standard\" />\r\n                                <div className=\"w-100 text-right py-3\"><button type=\"submit\" variant=\"contained\" className=\"w-100 btn\" style={{ backgroundColor: \"#0db8de\", color: \"white\" }}>Login</button></div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default frmLogin;","import React, { useEffect, useState } from 'react';\r\nimport './Login.css';\r\nimport $ from 'jquery';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport axios from '../../../../axios';\r\n\r\nimport Loading from '../../../UI/Loading/Loading';\r\n\r\nimport { EmployeeLogin } from '../../../../Redux/Actions/Action';\r\n\r\nimport FrmLogin from './frmLogin';\r\n\r\nimport socket from '../../../../io';\r\n\r\nconst Employee_Login = () => {\r\n\r\n    // To change URL\r\n    const history = useHistory();\r\n    let key = 'real secret keys should be long and random';\r\n    const encryptor = require('simple-encryptor')(key);\r\n    const dispatch = useDispatch();\r\n\r\n    const [ UserData, setUserData ] = useState(\r\n        {\r\n            LoginID: '', LoginPass: '', Email: '', Name: ''\r\n        }\r\n    );\r\n\r\n    // const [ PrevLogins, setPrevLogins ] = useState( localStorage.getItem('prevData') ? JSON.parse(localStorage.getItem('prevData')) : [] );\r\n    const [ RememberMe, setRememberMe ] = useState( true );\r\n    \r\n    // To show loading on true : false condition\r\n    const [ StartLoading, setStartLoading ] = useState(true);\r\n    \r\n    useEffect(\r\n        () => {\r\n            $('.PassDiv').hide(0);\r\n            $('.ButtonDiv2').hide(0);\r\n            setStartLoading(false);\r\n        }, []\r\n\r\n    )\r\n\r\n    const LoginShow = () =>{\r\n        $('.LoginDiv').fadeIn();\r\n        $('.PassDiv').fadeOut(0);\r\n        $('.ButtonDiv2').hide();\r\n        $('.ButtonDiv1').show();\r\n        $('.Emp_Login2_Grid .HideDiv').css('left', '0');\r\n        $('.Emp_Login2_Grid .HideDiv').html('Login ID');\r\n    }\r\n\r\n    const Login_Div2= ( e ) => {\r\n\r\n        e.preventDefault();\r\n        // setStartLoading(true);\r\n\r\n        if ( UserData.LoginID === '1234567890' )\r\n        {\r\n            history.push('/atthome');\r\n        }\r\n\r\n        axios.get('/authemployee').then(response => {\r\n\r\n            for (let x = 0; x < response.data.length; x++) {\r\n                // if the password and login id ofthe current index of an array is matched with \r\n                // the entered login id and password, the following condition will be true\r\n\r\n                if (UserData.LoginID === encryptor.decrypt(response.data[x].login_id)) {\r\n\r\n                    $('.LoginDiv').fadeOut(0);\r\n                    $('.PassDiv').fadeIn();\r\n                    $('.ButtonDiv2').show();\r\n                    $('.ButtonDiv1').hide();\r\n                    $('.Emp_Login2_Grid .HideDiv').css('left', '50%');\r\n                    $('.Emp_Login2_Grid .HideDiv').html('Password');\r\n                    \r\n                } else {\r\n                    setStartLoading(false);\r\n                    setUserData({ LoginID: UserData.LoginID, LoginPass: '' });\r\n                }\r\n\r\n            }\r\n\r\n        }).catch(error => {\r\n\r\n            setStartLoading(false);\r\n            toast.dark(error, {\r\n                position: 'bottom-center',\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n\r\n        });\r\n\r\n    }\r\n\r\n    const Login_Div3= () => {\r\n\r\n        $('.Login_Div1').hide();\r\n        $('.Login_Div2').hide();\r\n        $('.Login_Div3').show();\r\n\r\n    }\r\n\r\n    // Call on change function to store input field data into usestate()\r\n    const OnChangeHandler = ( e ) => {\r\n\r\n        const { name, value } = e.target;\r\n        const setValues = {\r\n            ...UserData,\r\n            [name]: value\r\n        }\r\n\r\n        setUserData(setValues);\r\n\r\n    }\r\n\r\n    // On form submition, the following function call\r\n    const OnUserLogin = ( e ) => {\r\n\r\n        e.preventDefault();\r\n        setStartLoading(true);\r\n\r\n            axios.get('/authemployee').then( response => {\r\n\r\n                let employees = response.data;\r\n\r\n                for ( let x = 0; x < employees.length; x++ )\r\n                {\r\n                    // if the password and login id ofthe current index of an array is matched with \r\n                    // the entered login id and password, the following condition will be true\r\n                    \r\n                    if ( UserData.LoginID === encryptor.decrypt( employees[x].login_id ) )\r\n                    {\r\n\r\n                        if ( UserData.LoginPass === encryptor.decrypt( employees[x].emp_password ) )\r\n                        {\r\n                            \r\n                            const d = new FormData();\r\n                            const date = new Date();\r\n                            d.append('empID', employees[x].emp_id);\r\n                            axios.post('/getemployee', d).then( res => {\r\n    \r\n                                let employee = res.data;\r\n\r\n                                socket.emit(\r\n                                    'UserCanLogin', employees[x].emp_id\r\n                                );\r\n                            \r\n                                    // CHECK IF USER IS ALREADY LOGIN IN ANOTHER WINDOW\r\n                                socket.on(\r\n                                    'UserCanLogin', ( result ) => {\r\n\r\n                                        setStartLoading(false);\r\n                                        if ( result.err === null && result.rslt[0].app_status === '' )\r\n                                        {\r\n                                            toast.dark('Login Success', {\r\n                                                position: 'bottom-center',\r\n                                                autoClose: 3000,\r\n                                                hideProgressBar: false,\r\n                                                closeOnClick: true,\r\n                                                pauseOnHover: true,\r\n                                                draggable: true,\r\n                                                progress: undefined,\r\n                                            });\r\n\r\n                                            console.log( employee );\r\n                                            sessionStorage.setItem('EmpID', employees[x].emp_id);\r\n                                            sessionStorage.setItem('name', employee[0].name);\r\n\r\n                                            socket.emit(\r\n                                                'NewUser', employees[x].emp_id\r\n                                            );\r\n\r\n                                            dispatch( EmployeeLogin( employee[0] ) );\r\n            \r\n                                            setUserData( { LoginID: '', LoginPass: '' } );\r\n    \r\n                                            setTimeout(() => {\r\n                                                history.replace('/login');\r\n                                            }, 1000);\r\n                                        }else\r\n                                        {\r\n                                            toast.dark('You ar already login in another window', {\r\n                                                position: 'bottom-center',\r\n                                                autoClose: 3000,\r\n                                                hideProgressBar: false,\r\n                                                closeOnClick: true,\r\n                                                pauseOnHover: true,\r\n                                                draggable: true,\r\n                                                progress: undefined,\r\n                                            });\r\n                                        }\r\n\r\n                                    }\r\n                                );\r\n\r\n                                if ( RememberMe )\r\n                                {\r\n\r\n                                    let monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n                                        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n                                    ];\r\n\r\n                                    if ( localStorage.getItem('prevData') ) {\r\n\r\n                                        let names = [];\r\n\r\n                                        for ( let x = 0; x < JSON.parse(localStorage.getItem('prevData')).length; x++ )\r\n                                        {\r\n\r\n                                            names.push(JSON.parse(localStorage.getItem('prevData'))[x].loginID);\r\n\r\n                                        }\r\n\r\n                                        if ( names.includes(encryptor.decrypt(employees[x].login_id)) )\r\n                                        {\r\n                                            // \r\n                                        }else\r\n                                        {\r\n                                            let prevData = JSON.parse(localStorage.getItem('prevData'));\r\n                                            let data = {\r\n                                                img: employees[x].emp_image,\r\n                                                name: employee[0].name,\r\n                                                loginID: encryptor.decrypt(employees[x].login_id),\r\n                                                email: employee[0].email,\r\n                                                date: date.getDate() + ' ' + monthNames[date.getMonth()] + ' ' + date.getFullYear()\r\n                                            }\r\n\r\n                                            prevData.push(data);\r\n                                            localStorage.setItem('prevData', JSON.stringify(prevData));\r\n                                        }\r\n                                        \r\n                                    } else {\r\n                                        let data = [\r\n                                            {\r\n                                                img: employees[x].emp_image,\r\n                                                name: employee[0].name,\r\n                                                loginID: encryptor.decrypt(employees[x].login_id),\r\n                                                email: employee[0].email,\r\n                                                date: date.getDate() + ' ' + monthNames[date.getMonth()] + ' ' + date.getFullYear()\r\n                                            }\r\n                                        ];\r\n\r\n                                        localStorage.setItem('prevData', JSON.stringify(data));\r\n                                    }\r\n\r\n                                }\r\n\r\n                            } ).catch( err => {\r\n\r\n                                toast.dark(err, {\r\n                                    position: 'top-right',\r\n                                    autoClose: 5000,\r\n                                    hideProgressBar: false,\r\n                                    closeOnClick: true,\r\n                                    pauseOnHover: true,\r\n                                    draggable: true,\r\n                                    progress: undefined,\r\n                                });;\r\n\r\n                            } );\r\n\r\n                            break;\r\n                        }else {\r\n\r\n                            setStartLoading(false);\r\n\r\n                            setUserData( { LoginID: UserData.LoginID, LoginPass: '' } );\r\n                            toast.dark('Password Not Match', {\r\n                                position: 'bottom-center',\r\n                                autoClose: 3000,\r\n                                hideProgressBar: false,\r\n                                closeOnClick: true,\r\n                                pauseOnHover: true,\r\n                                draggable: true,\r\n                                progress: undefined,\r\n                            });\r\n                            break;\r\n                            \r\n                        }\r\n                        \r\n                    }else\r\n                    {\r\n                        setStartLoading(false);\r\n                        setUserData( { LoginID: UserData.LoginID, LoginPass: '' } );\r\n                    }\r\n\r\n                }\r\n\r\n            } ).catch( error => {\r\n\r\n                setStartLoading(false);\r\n                toast.dark(error, {\r\n                    position: 'bottom-center',\r\n                    autoClose: 3000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n\r\n            } );\r\n\r\n    }\r\n\r\n    if ( sessionStorage.getItem('EmpID') ) {\r\n\r\n        history.replace('/dashboard');\r\n        \r\n    };\r\n\r\n    const PrevLoginSelect = ( usrName, mail, loginID ) => {\r\n\r\n        axios.get('/authemployee').then( response => {\r\n            \r\n            for ( let x = 0; x < response.data.length; x++ )\r\n            {\r\n                // if the password and login id ofthe current index of an array is matched with \r\n                // the entered login id and password, the following condition will be true\r\n                \r\n                if ( loginID.toString() === encryptor.decrypt( response.data[x].login_id ) )\r\n                {\r\n\r\n                    setUserData(\r\n                        {\r\n                            LoginID: encryptor.decrypt( response.data[x].login_id ), LoginPass: '', Email: mail, Name: usrName\r\n                        }\r\n                    );\r\n\r\n                    setRememberMe( true );\r\n                    Login_Div3();\r\n\r\n                }\r\n\r\n            }\r\n\r\n        } ).catch( error => {\r\n\r\n            setStartLoading(false);\r\n            toast.dark(error, {\r\n                position: 'bottom-center',\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n\r\n        } );\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <ToastContainer />\r\n            <Loading display={StartLoading} />\r\n            <FrmLogin Login_Div2={ Login_Div2 } LoginShow={LoginShow} OnChangeHandler={OnChangeHandler} UserData={UserData} OnUserLogin={OnUserLogin} />\r\n        </>\r\n    )\r\n}\r\nexport default Employee_Login;","import io from 'socket.io-client';\r\n\r\nconst socket = io.connect('https://192.168.10.116:8888', { autoConnect: true });\r\n// const socket = io.connect('https://192.168.10.14:3443', { autoConnect: true });\r\n\r\nexport default socket;"],"sourceRoot":""}