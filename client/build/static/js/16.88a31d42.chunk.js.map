{"version":3,"sources":["images/loadingIcons/icons8-iphone-spinner.gif","Components/EmployeeProtal/Dashboard/Pages/Chat/Components/Drive/Drive.jsx","images/nochat.png","Components/EmployeeProtal/Dashboard/Pages/Chat/Employee_Chat.jsx","Components/UI/Modal/Modal.jsx"],"names":["Drive","props","useState","Data","setData","useEffect","data","className","map","val","index","style","backgroundImage","name","onClick","AttachDrive","EmployeesList","lazy","DailyChat","Employee_Chat","Date","Calender","setCalender","encryptor","require","Employees","setEmployees","LoadingState","setLoadingState","EmployeeStatus","setEmployeeStatus","Chat","setChat","ChatEmployee","setChatEmployee","ShowChat","setShowChat","Show","setShow","DriveContent","setDriveContent","EmpID","setEmpID","EmpIndex","setEmpIndex","CurrentEmployeeData","useSelector","state","EmpAuth","EmployeeData","GetAllEmployees","parseInt","sessionStorage","getItem","useMemo","window","screen","width","$","show","hide","socket","on","res","rslt","app_status","emp_id","receiver","undefined","sender","trigger","mode","FormData","append","axios","post","then","catch","err","toast","dark","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","GetThatEmpChat","id","toString","emit","length","setTimeout","objDiv","document","getElementById","scrollTop","scrollHeight","OnChat","encrypt","tConvert","time","match","slice","join","OpenDriveModal","console","log","ShowHide","showCalender","Modal","Hide","content","txt","body","fallback","src","loading","alt","height","emp_image","designation_name","company_name","toDateString","borderRadius","color","placeholder","NoCHat","onChange","value","fontWeight","toTimeString","display","animationDelay"],"mappings":"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","file":"static/js/16.88a31d42.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/icons8-iphone-spinner.e2bb0653.gif\";","import React, { useEffect, useState } from 'react';\r\n\r\nimport './Drive.css';\r\n\r\nconst Drive = ( props ) => {\r\n\r\n    const [ Data, setData ] = useState([]);\r\n\r\n    useEffect(\r\n        () => {\r\n\r\n            setData( props.data );\r\n\r\n        }, [ props.data ]\r\n    )\r\n\r\n    return (\r\n        <div className=\"DicussionDrive\">\r\n            {\r\n                Data.map(\r\n                    ( val, index ) => {\r\n\r\n                        return (\r\n                            <div \r\n                                key={ index } \r\n                                className=\"DriveItem\"\r\n                                style={\r\n                                    {\r\n                                        backgroundImage: \"url('images/drive/\" + val.name + \"')\"\r\n                                    }\r\n                                }\r\n                                onClick={ () => props.AttachDrive( val.name ) }\r\n                            ></div>\r\n                        )\r\n\r\n                    }\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Drive;","export default __webpack_public_path__ + \"static/media/nochat.25180477.png\";","import React, { lazy, Suspense, useEffect, useMemo, useState } from 'react'\r\n\r\nimport './Employee_Chat.css';\r\nimport axios from '../../../../../axios';\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport $ from 'jquery';\r\n\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport Drive from './Components/Drive/Drive';\r\nimport Modal from '../../../../UI/Modal/Modal';\r\n\r\nimport socket from '../../../../../io';\r\n\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\n\r\nimport NoCHat from '../../../../../images/nochat.png';\r\nimport loading from '../../../../../images/loadingIcons/icons8-iphone-spinner.gif';\r\n\r\nconst EmployeesList = lazy(() => import('./Components/EmployeesList/EmployeesList'));\r\nconst DailyChat = lazy(() => import('./Components/DailyChat/DailyChat'));\r\n\r\nconst Employee_Chat = () => {\r\n\r\n    const [Calender, setCalender] = useState(new Date());\r\n\r\n    let key = 'real secret keys should be long and random';\r\n    const encryptor = require('simple-encryptor')(key);\r\n\r\n    const [Employees, setEmployees] = useState([]);\r\n    const [LoadingState, setLoadingState] = useState(false);\r\n    const [EmployeeStatus, setEmployeeStatus] = useState('');\r\n    const [Chat, setChat] = useState([]);\r\n    const [ChatEmployee, setChatEmployee] = useState({});\r\n    const [ShowChat, setShowChat] = useState(false);\r\n    const [Show, setShow] = useState(false);\r\n    const [DriveContent, setDriveContent] = useState([]);\r\n    const [EmpID, setEmpID] = useState();\r\n    const [EmpIndex, setEmpIndex] = useState();\r\n\r\n    const CurrentEmployeeData = useSelector((state) => state.EmpAuth.EmployeeData);\r\n\r\n    useEffect( // component did mount\r\n        () => {\r\n\r\n            GetAllEmployees('chat');\r\n            setEmpID(parseInt(sessionStorage.getItem('EmpID')));\r\n\r\n        }, []\r\n    );\r\n\r\n    useMemo( // component did update\r\n        () => {\r\n\r\n            if ( window.screen.width < 750 ) {\r\n\r\n                $('.Center').show();\r\n                $('.List').hide();\r\n                $('.chatcount').hide();\r\n            }\r\n\r\n        }, [ Calender ]\r\n    );\r\n\r\n    useEffect(\r\n        () => {\r\n\r\n            // CHECK USER IS ONLINE OR NOT\r\n            socket.on(\r\n                'UserOnline', (res) => {\r\n\r\n                    setEmployeeStatus(res.rslt[0].app_status);\r\n\r\n                }\r\n            )\r\n\r\n            // WHEN NEW CHAT COMES\r\n            socket.on(\r\n                'UserNewChat', (res) => {\r\n\r\n                    if (CurrentEmployeeData.emp_id === parseInt(res.receiver)) {\r\n\r\n                        if (ChatEmployee.emp_id !== undefined) {\r\n                            if (ChatEmployee.emp_id === parseInt(res.sender)) {\r\n                                // GetThatEmpChat( ChatEmployee.emp_id, EmpIndex );\r\n                                $('.NewTweet .refresh').trigger('click');\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n            )\r\n\r\n        }, [ChatEmployee, CurrentEmployeeData.emp_id]\r\n    )\r\n\r\n    const GetAllEmployees = (mode) => {\r\n\r\n        const Data = new FormData();\r\n\r\n        if (mode === 'chat') {\r\n\r\n            setEmployees([]);\r\n            Data.append('currentEmp', sessionStorage.getItem('EmpID'));\r\n\r\n            axios.post('/getchatemployees', Data).then(res => {\r\n\r\n                setEmployees(res.data);\r\n\r\n            }).catch(err => {\r\n\r\n                toast.dark(err, {\r\n                    position: 'top-right',\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });;\r\n\r\n            });\r\n\r\n            if (window.screen.width < 750) {\r\n                $('.Center').hide();\r\n                $('.List').show();\r\n                $('.chatcount').show();\r\n                $('.Right').hide();\r\n            }\r\n            else {\r\n\r\n                // $('.Center').show();\r\n                // $('.List').hide();\r\n            }\r\n\r\n\r\n        }\r\n\r\n        if (mode === 'contacts') {\r\n\r\n            setEmployees([]);\r\n            Data.append('currentEmp', sessionStorage.getItem('EmpID'));\r\n\r\n            axios.post('/getallemployees', Data).then(res => {\r\n\r\n                setEmployees(res.data);\r\n\r\n            }).catch(err => {\r\n\r\n                toast.dark(err, {\r\n                    position: 'top-right',\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });;\r\n\r\n            });\r\n\r\n            if (window.screen.width < 750) {\r\n                $('.Center').hide();\r\n                $('.List').show();\r\n                $('.chatcount').show();\r\n                $('.Right').hide();\r\n            }\r\n            else {\r\n\r\n                // $('.Center').show();\r\n                // $('.List').hide();\r\n            }\r\n\r\n        }\r\n\r\n    };\r\n\r\n    const GetThatEmpChat = (id, index) => {\r\n\r\n        setLoadingState(true);\r\n\r\n        const Data = new FormData();\r\n        Data.append('sender', id);\r\n        Data.append('receiver', sessionStorage.getItem('EmpID'));\r\n        Data.append('chatDate', Calender.toString());\r\n        axios.post('/getemployeewithchat', Data).then(res => {\r\n\r\n            setLoadingState(false);\r\n            setShowChat(true);\r\n            setChatEmployee(Employees[index]);\r\n            socket.emit(\r\n                'UserOnline', Employees[index].emp_id\r\n            )\r\n\r\n            setEmpIndex(index);\r\n            if (res.data.length !== Chat.length) {\r\n\r\n                setChat([]);\r\n                setChat(res.data);\r\n                setTimeout(() => {\r\n                    var objDiv = document.getElementById(\"ChatContainer\");\r\n                    if (objDiv) {\r\n                        objDiv.scrollTop = objDiv.scrollHeight;\r\n                    }\r\n                }, 300);\r\n\r\n            }\r\n\r\n        }).catch(err => {\r\n\r\n            setLoadingState(false);\r\n            toast.dark(err, {\r\n                position: 'top-right',\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n\r\n        });\r\n\r\n        if (window.screen.width < 750) {\r\n            $('.Center').show();\r\n            $('.List').hide();\r\n            $('.chatcount').hide();\r\n        }\r\n        else {\r\n\r\n            // $('.List').show();\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    const OnChat = () => {\r\n\r\n\r\n        if ($('#Sendtext').val() !== '') {\r\n\r\n            const Data = new FormData();\r\n            Data.append('eventID', 1);\r\n            Data.append('senderID', sessionStorage.getItem('EmpID'));\r\n            Data.append('receiverID', ChatEmployee.emp_id);\r\n            Data.append('ChatBody', encryptor.encrypt($('#Sendtext').val()));\r\n            Data.append('NotificationBody', $('#Sendtext').val());\r\n            Data.append('Title', CurrentEmployeeData.name);\r\n            axios.post('/insertchat', Data).then(() => {\r\n\r\n                GetThatEmpChat(ChatEmployee.emp_id, EmpIndex);\r\n\r\n                $('#Sendtext').val('');\r\n                setTimeout(() => {\r\n                    var objDiv = document.getElementById(\"ChatContainer\");\r\n                    if (objDiv) {\r\n                        objDiv.scrollTop = objDiv.scrollHeight;\r\n                    }\r\n                }, 300);\r\n\r\n                axios.post('/newnotification', Data).then(() => {\r\n\r\n                    socket.emit('NewNotification', ChatEmployee.emp_id);\r\n                    socket.emit('NewChat', { sender: CurrentEmployeeData.emp_id, receiver: ChatEmployee.emp_id, index: EmpIndex });\r\n\r\n                }).catch(err => {\r\n                    toast.dark(err, {\r\n                        position: 'top-right',\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                    });\r\n                });\r\n\r\n            }).catch(err => {\r\n\r\n                toast.dark(err, {\r\n                    position: 'top-right',\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function tConvert(time) {\r\n        // Check correct time format and split into components\r\n        time = time.toString().match(/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\r\n\r\n        if (time.length > 1) { // If time format correct\r\n            time = time.slice(1);  // Remove full string match value\r\n            time[5] = +time[0] < 12 ? 'AM' : 'PM'; // Set AM/PM\r\n            time[0] = +time[0] % 12 || 12; // Adjust hours\r\n        }\r\n        return time.join(''); // return adjusted time or original string\r\n\r\n    }\r\n\r\n    const OpenDriveModal = () => {\r\n\r\n        axios.post(\r\n            '/getalldrive',\r\n            {\r\n                emp_id: CurrentEmployeeData.emp_id\r\n            }\r\n        ).then(\r\n            res => {\r\n\r\n                setDriveContent(\r\n                    res.data\r\n                );\r\n\r\n            }\r\n        ).catch(\r\n            err => {\r\n\r\n                console.log(err);\r\n\r\n            }\r\n        )\r\n        ShowHide();\r\n\r\n    }\r\n\r\n    const ShowHide = () => {\r\n\r\n        setShow(!Show);\r\n\r\n    }\r\n\r\n    const AttachDrive = (txt) => {\r\n\r\n        let body = '/***' + txt + '***/';\r\n        $('#Sendtext').val(body);\r\n        OnChat();\r\n        ShowHide();\r\n\r\n    }\r\n\r\n    const showCalender = () => {\r\n        if (window.screen.width < 750) {\r\n            $('.Center').hide();\r\n            $('.List').hide();\r\n            $('.chatcount').hide();\r\n            $('.Right').show();\r\n        }\r\n        else {\r\n\r\n            // $('.List').show();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"EmployeeChat\">\r\n                <Modal show={Show} Hide={ShowHide} content={<Drive AttachDrive={AttachDrive} data={DriveContent} />} />\r\n\r\n                <div className=\"Left\">\r\n\r\n                    <div className='chatcount'>\r\n                        <p className='font-weight-bold'>Chat Members</p>\r\n                        <p>\r\n                            {\r\n                                Employees.length > 0\r\n                                    ?\r\n                                    (Employees.length - 1)\r\n                                    :\r\n                                    Employees.length\r\n                            }\r\n                            members\r\n                        </p>\r\n                    </div>\r\n\r\n                    <div className=\"tabs\">\r\n                        <button onClick={() => GetAllEmployees('chat')}>Chat</button>\r\n                        <button onClick={() => GetAllEmployees('contacts')}>contacts</button>\r\n                    </div>\r\n\r\n                    {/* EMPLOYEES LIST */}\r\n                    {\r\n                        useMemo(\r\n                            () => {\r\n\r\n                                return (\r\n                                    <Suspense\r\n                                        fallback={\r\n                                            <div className=\"text-center\">\r\n                                                <img\r\n                                                    src={loading}\r\n                                                    alt=\"Please wait.....\"\r\n                                                    width=\"50\"\r\n                                                    height=\"50\"\r\n                                                    className=\"rounded-circle\"\r\n                                                />\r\n                                                <p className=\"mb-0\">Please Wait....</p>\r\n                                            </div>\r\n                                        }\r\n                                    >\r\n                                        <EmployeesList Employees={Employees} GetThatEmpChat={GetThatEmpChat} />\r\n                                    </Suspense>\r\n                                )\r\n\r\n                            }, [Employees]\r\n                        )\r\n                    }\r\n\r\n                </div>\r\n\r\n                {\r\n                    useMemo(\r\n                        () => {\r\n\r\n                            return (\r\n                                <div className=\"Center\">\r\n                                    {\r\n                                        ShowChat\r\n                                            ?\r\n                                            <>\r\n                                                <div className=\"ChatEmployee\">\r\n                                                    <img\r\n                                                        src={'images/employees/' + ChatEmployee.emp_image}\r\n                                                        width='50'\r\n                                                        height='50'\r\n                                                        alt=\"chat employee img\"\r\n                                                        className='rounded-circle'\r\n                                                    />\r\n                                                    <div className=\"ml-2\">\r\n                                                        <p className='font-weight-bold'> {ChatEmployee.name} </p>\r\n                                                        <p> {ChatEmployee.designation_name + ' in ' + ChatEmployee.company_name} </p>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                <div className=\"ChatContent\" id=\"ChatContainer\">\r\n\r\n                                                    {\r\n                                                        Calender.toDateString() !== new Date().toDateString()\r\n                                                            ?\r\n                                                            <p className=\"TweetDate\"> {Calender.toDateString()}</p>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                    {\r\n                                                        <Suspense\r\n                                                            fallback={\r\n                                                                <div className=\"h-100 d-flex align-items-center justify-content-center\">\r\n                                                                    <img\r\n                                                                        src={loading}\r\n                                                                        alt=\"Please wait.....\"\r\n                                                                        width=\"50\"\r\n                                                                        height=\"50\"\r\n                                                                        className=\"rounded-circle\"\r\n                                                                    />\r\n                                                                </div>\r\n                                                            }\r\n                                                        >\r\n                                                            <DailyChat\r\n                                                                LoadingState={LoadingState}\r\n                                                                encryptor={encryptor}\r\n                                                                Calender={Calender}\r\n                                                                EmpID={EmpID}\r\n                                                                CurrentEmployeeData={CurrentEmployeeData}\r\n                                                                tConvert={tConvert}\r\n                                                                Chat={Chat}\r\n                                                                ChatEmployee={ChatEmployee}\r\n                                                            />\r\n                                                        </Suspense>\r\n                                                    }\r\n\r\n\r\n                                                </div>\r\n\r\n                                                <div className=\"NewTweet\">\r\n                                                    <div\r\n                                                        className=\"d-flex align-content-center w-100 bg-white border\"\r\n                                                        style={\r\n                                                            {\r\n                                                                borderRadius: '10px',\r\n                                                                color: 'rgb(91, 109, 128, .5)'\r\n                                                            }\r\n                                                        }\r\n                                                    >\r\n                                                        <input\r\n                                                            className=\"form-control w-100\"\r\n                                                            placeholder=\"Type something here...\"\r\n                                                            id=\"Sendtext\"\r\n                                                        />\r\n                                                        <i className=\"las la-paperclip\" onClick={OpenDriveModal}></i>\r\n                                                    </div>\r\n                                                    <button onClick={OnChat}>\r\n                                                        <i className=\"las la-arrow-up\"></i>\r\n                                                    </button>\r\n                                                    <button className=\"btn text-white refresh d-none\" onClick={() => GetThatEmpChat(ChatEmployee.emp_id, EmpIndex)}><i className=\"las la-redo-alt\"></i></button>\r\n                                                </div>\r\n                                            </>\r\n                                            :\r\n                                            <div className=\"NoChat\">\r\n\r\n                                                <img\r\n                                                    src={NoCHat}\r\n                                                    width=\"100%\"\r\n                                                    height=\"auto\"\r\n                                                    alt=\"No CHat Img\"\r\n                                                />\r\n\r\n                                                <h3 className='font-weight-bold'>NO EMPLOYEE SELECTED</h3>\r\n\r\n                                            </div>\r\n                                    }\r\n\r\n                                    <div className='calenderdiv' onClick={showCalender}>\r\n                                        <i className=\"las la-calendar\"></i>\r\n                                    </div>\r\n\r\n\r\n                                </div>\r\n                            )\r\n\r\n                        }, [Calender, Chat, ChatEmployee, EmpID, EmpIndex, ShowChat, LoadingState]\r\n                    )\r\n                }\r\n\r\n                <div className='Right'>\r\n\r\n                    <div className='RightDiv'>\r\n                        <Calendar\r\n                            onChange={setCalender}\r\n                            value={Calender}\r\n                        />\r\n\r\n                        <div className=\"Details\">\r\n                            <p className=\"lightColor\">Status</p>\r\n                            <p\r\n                                style={\r\n                                    {\r\n                                        fontWeight: 500\r\n                                    }\r\n                                }\r\n                            >\r\n                                {\r\n                                    ShowChat\r\n                                        ?\r\n                                        ChatEmployee.name + ' is ' + (EmployeeStatus === '' ? 'offline' : 'online')\r\n                                        :\r\n                                        'No Employee Selected'\r\n                                }\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"Details\">\r\n                            <p className=\"lightColor\">You are online from</p>\r\n                            <p\r\n                                style={\r\n                                    {\r\n                                        fontWeight: 500\r\n                                    }\r\n                                }\r\n                            >\r\n                                {\r\n                                    new Date().toTimeString()\r\n                                }\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Employee_Chat;","import React from 'react'\r\nimport './Modal.css';\r\n\r\nconst Modal = ( props ) =>{\r\n    return (\r\n        <>\r\n            <div className=\"Attandence_Request_Div\" style={ { display: props.show ? 'flex' : 'none'  } }>\r\n                <div className=\"dark\" onClick={ props.Hide }>\r\n                </div>\r\n                <div style={ { animationDelay: ( 0 + '.' + 1 ).toString() + 's' } } className={ props.show ? \"Attandence_Request_Div_Content Attandence_Request_Div_Content2\" : \"Attandence_Request_Div_Content\" }>\r\n                    {\r\n                        props.content\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Modal;"],"sourceRoot":""}