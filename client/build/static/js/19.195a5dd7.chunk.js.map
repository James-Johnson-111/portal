{"version":3,"sources":["Components/AdminModule/Admin_login/Admin_login.jsx"],"names":["Admin_login","history","useHistory","useState","userName","userPass","User","setUser","encryptor","require","OnChangeHandler","e","target","name","value","setValues","sessionStorage","getItem","replace","className","onSubmit","preventDefault","axios","get","then","response","x","data","length","decrypt","user_name","user_password","toast","dark","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","setItem","user_id","user_image","setTimeout","catch","error","style","type","placeholder","onChange","minLength","required"],"mappings":"yeA4IeA,UAnIK,WAEhB,IAAMC,EAAUC,cAEhB,EAA0BC,mBACtB,CACIC,SAAU,GAAIC,SAAU,KAFhC,mBAAQC,EAAR,KAAcC,EAAd,KAOMC,EAAYC,EAAQ,IAARA,CADR,8CAIJC,EAAkB,SAAEC,GAEtB,MAAwBA,EAAEC,OAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACRC,EAAS,2BACRT,GADQ,kBAEVO,EAAOC,IAGZP,EAAQQ,IA0FZ,OALKC,eAAeC,QAAQ,WAExBhB,EAAQiB,QAAQ,iBAIhB,qCACI,cAAC,IAAD,IACA,qBAAKC,UAAU,cAAf,SACI,sBAAKA,UAAU,sBAAf,UACI,mBAAGA,UAAU,gBACb,uBAAMC,SA3FF,SAAET,GAElBA,EAAEU,iBAEFC,IAAMC,IAAI,gBAAgBC,MAAM,SAAAC,GAE5B,IAAM,IAAIC,EAAI,EAAGA,EAAID,EAASE,KAAKC,OAAQF,IAC3C,CAGI,GAAKpB,EAAKF,WAAaI,EAAUqB,QAASJ,EAASE,KAAKD,GAAGI,WAC3D,CAGI,GAFmBtB,EAAUqB,QAASJ,EAASE,KAAKD,GAAGK,iBAEnCzB,EAAKD,SACzB,CAEI2B,IAAMC,KAAK,gBAAiB,CACxBC,SAAU,gBACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,IAGdzB,eAAe0B,QAAQ,SAAUjB,EAASE,KAAKD,GAAGiB,SAClD3B,eAAe0B,QAAQ,WAAYlC,EAAUqB,QAASJ,EAASE,KAAKD,GAAGI,YACvEd,eAAe0B,QAAQ,UAAWjB,EAASE,KAAKD,GAAGkB,YAEnDrC,EAAS,CAAEH,SAAU,GAAIC,SAAU,KAEnCwC,YAAW,WACP5C,EAAQiB,QAAQ,mBACjB,KAEH,MAGAX,EAAS,CAAEH,SAAUE,EAAKF,SAAUC,SAAU,KAC9C2B,IAAMC,KAAK,qBAAsB,CAC7BC,SAAU,gBACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,IAEd,MAOJlC,EAAS,CAAEH,SAAUE,EAAKF,SAAUC,SAAU,SAMtDyC,OAAO,SAAAC,GAGPf,IAAMC,KAAKc,EAAO,CACdb,SAAU,gBACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,QAkBN,UACI,oBAAItB,UAAU,sBAAsB6B,MAAQ,CAAE,WAAe,eAA7D,yBACA,uBAAOC,KAAK,OAAO9B,UAAU,eAAeN,KAAK,WAAWqC,YAAY,WAAWpC,MAAQR,EAAKF,SAAW+C,SAAWzC,EAAkB0C,UAAU,IAAIC,UAAQ,IAC9J,uBAAOJ,KAAK,WAAW9B,UAAU,eAAeN,KAAK,WAAWqC,YAAY,WAAWpC,MAAQR,EAAKD,SAAW8C,SAAWzC,EAAkB0C,UAAU,IAAIC,UAAQ,IAClK,wBAAQlC,UAAU,MAAM8B,KAAK,SAA7B","file":"static/js/19.195a5dd7.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport './Admin_login.css';\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from '../../../axios';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst Admin_login = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    const [ User, setUser ] = useState(\r\n        {\r\n            userName: '', userPass: ''\r\n        }\r\n    );\r\n\r\n    let key = 'real secret keys should be long and random';\r\n    const encryptor = require('simple-encryptor')(key);\r\n\r\n    // Call on change function to store input field data into usestate()\r\n    const OnChangeHandler = ( e ) => {\r\n\r\n        const { name, value } = e.target;\r\n        const setValues = {\r\n            ...User,\r\n            [name]: value\r\n        }\r\n\r\n        setUser(setValues);\r\n\r\n    }\r\n\r\n    // On form submition, the following function call\r\n    const OnUserLogin = ( e ) => {\r\n\r\n        e.preventDefault();\r\n\r\n        axios.get('/getallusers').then( response => {\r\n\r\n            for ( let x = 0; x < response.data.length; x++ )\r\n            {\r\n                // if the password and login id ofthe current index of an array is matched with \r\n                // the entered login id and password, the following condition will be true\r\n                if ( User.userName === encryptor.decrypt( response.data[x].user_name ) )\r\n                {\r\n                    const verifyPass = encryptor.decrypt( response.data[x].user_password );\r\n\r\n                    if ( verifyPass === User.userPass )\r\n                    {\r\n\r\n                        toast.dark('Login Success', {\r\n                            position: 'bottom-center',\r\n                            autoClose: 3000,\r\n                            hideProgressBar: false,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                        });\r\n\r\n                        sessionStorage.setItem('UserID', response.data[x].user_id);\r\n                        sessionStorage.setItem('userName', encryptor.decrypt( response.data[x].user_name ));\r\n                        sessionStorage.setItem('UserImg', response.data[x].user_image);\r\n\r\n                        setUser( { userName: '', userPass: '' } );\r\n\r\n                        setTimeout(() => {\r\n                            history.replace('/admin_module');\r\n                        }, 1000);\r\n\r\n                        break;\r\n                    }else {\r\n\r\n                        setUser( { userName: User.userName, userPass: '' } );\r\n                        toast.dark('Password Not Match', {\r\n                            position: 'bottom-center',\r\n                            autoClose: 3000,\r\n                            hideProgressBar: false,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                            progress: undefined,\r\n                        });\r\n                        break;\r\n                        \r\n                    }\r\n                    \r\n                }else\r\n                {\r\n                    \r\n                    setUser( { userName: User.userName, userPass: '' } );\r\n\r\n                }\r\n\r\n            }\r\n\r\n        } ).catch( error => {\r\n\r\n            \r\n            toast.dark(error, {\r\n                position: 'bottom-center',\r\n                autoClose: 3000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n\r\n        } );\r\n\r\n    }\r\n\r\n    if ( sessionStorage.getItem('UserID') )\r\n    {\r\n        history.replace('/admin_module');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ToastContainer />\r\n            <div className='Admin_login'>\r\n                <div className=\"Admin_login-content\">\r\n                    <i className=\"lar la-user\"></i>\r\n                    <form onSubmit={ OnUserLogin }>\r\n                        <h3 className=\"text-uppercase mb-5\" style={ { 'fontFamily' : 'JosefinSans' } }>Admin Panel</h3>\r\n                        <input type=\"text\" className=\"form-control\" name=\"userName\" placeholder=\"Username\" value={ User.userName } onChange={ OnChangeHandler } minLength=\"3\" required />\r\n                        <input type=\"password\" className=\"form-control\" name=\"userPass\" placeholder=\"Password\" value={ User.userPass } onChange={ OnChangeHandler } minLength=\"3\" required />\r\n                        <button className=\"btn\" type=\"submit\">Login</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Admin_login;"],"sourceRoot":""}