{"version":3,"sources":["Components/EmployeeProtal/Dashboard/Pages/Procurement/ViewPurchaseOrder/Components/Home/Home.jsx","../node_modules/webpack/buildin/module.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["Home","props","useState","ChartData","setChartData","MonthlyRequests","setMonthlyRequests","RequestsSplit","setRequestsSplit","MinMax","setMinMax","EmpData","setEmpData","TotalValue","setTotalValue","useEffect","count","rejected","approved","waiting","sent","viewed","x","CountStatus","length","push","labels","datasets","label","data","backgroundColor","arr","companies","ViewRequest","includes","company_name","filter","val","total","parseFloat","company","ReactTooltip","rebuild","className","CountRequests","Object","keys","access","JSON","parse","toLocaleString","width","height","map","index","style","fontSize","display","marginRight","Math","max","min","totalCount","percent","month","module","exports","webpackPolyfill","deprecate","paths","children","defineProperty","enumerable","get","l","i","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/47.de5b8e0d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nimport './Home.css';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nconst Home = (props) => {\r\n\r\n    const [ChartData, setChartData] = useState({});\r\n    const [MonthlyRequests, setMonthlyRequests] = useState([]);\r\n    const [RequestsSplit, setRequestsSplit] = useState([]);\r\n\r\n    const [MinMax, setMinMax] = useState([]);\r\n    const [EmpData, setEmpData] = useState({});\r\n    \r\n    const [TotalValue, setTotalValue] = useState(0.00);\r\n\r\n    useEffect(\r\n        () => {\r\n\r\n            // IMPORTANT VARIABLES\r\n            let count = [];\r\n            let rejected = 0;\r\n            let approved = 0;\r\n            let waiting = 0;\r\n            let sent = 0;\r\n            let viewed = 0;\r\n\r\n            // FOR REJECTED\r\n            for (let x = 0; x < props.CountStatus.length; x++) {\r\n\r\n                if (props.CountStatus[x] === 'Rejected') {\r\n                    rejected = rejected + 1;\r\n                }\r\n\r\n            }\r\n\r\n            // FOR APPROVED\r\n            for (let x = 0; x < props.CountStatus.length; x++) {\r\n\r\n                if (props.CountStatus[x] === 'Approved') {\r\n                    approved = approved + 1;\r\n                }\r\n\r\n            }\r\n\r\n            // FOR WAITING\r\n            for (let x = 0; x < props.CountStatus.length; x++) {\r\n\r\n                if (props.CountStatus[x] === 'Waiting For Approval') {\r\n                    waiting = waiting + 1;\r\n                }\r\n\r\n            }\r\n\r\n            // FOR SENT\r\n            for (let x = 0; x < props.CountStatus.length; x++) {\r\n\r\n                if (props.CountStatus[x] === 'Sent') {\r\n                    sent = sent + 1;\r\n                }\r\n\r\n            }\r\n\r\n            // FOR VIEWED\r\n            for (let x = 0; x < props.CountStatus.length; x++) {\r\n\r\n                if (props.CountStatus[x] === 'Viewed') {\r\n                    viewed = viewed + 1;\r\n                }\r\n\r\n            }\r\n\r\n            count.push(\r\n                rejected,\r\n                approved,\r\n                waiting,\r\n                sent,\r\n                viewed\r\n            )\r\n\r\n            setChartData(\r\n                {\r\n                    labels: ['Rejected', 'Approved', 'Waiting For Approval', 'Sent', 'Viewed'],\r\n                    datasets: [\r\n                        {\r\n                            label: 'Requests for the year',\r\n                            data: count,\r\n                            backgroundColor: [\r\n                                '#DC3545',\r\n                                '#28A745',\r\n                                '#FFC107',\r\n                                '#17A2B8',\r\n                                '#007BFF'\r\n                            ]\r\n                        }\r\n                    ]\r\n                }\r\n            );\r\n\r\n\r\n        }, [props.CountStatus]\r\n    );\r\n\r\n    useEffect(\r\n        () => {\r\n\r\n            setMonthlyRequests(props.MonthlyRequests);\r\n            let arr = [];\r\n\r\n            for ( let x = 0; x < props.MonthlyRequests.length; x++ )\r\n            {\r\n                arr.push( props.MonthlyRequests[x].count );\r\n            }\r\n\r\n            setMinMax( arr );\r\n\r\n        }, [props.MonthlyRequests]\r\n    )\r\n\r\n    useEffect(\r\n        () => {\r\n\r\n            let companies = [];\r\n            let data = [];\r\n            for ( let x = 0; x < props.ViewRequest.length; x++ )\r\n            {\r\n                if ( !companies.includes( props.ViewRequest[x].company_name ) )\r\n                {\r\n                    companies.push( props.ViewRequest[x].company_name );\r\n                }\r\n            }\r\n\r\n            for ( let x = 0; x < companies.length; x++ )\r\n            {\r\n                let arr = props.ViewRequest.filter(\r\n                    ( val ) => {\r\n\r\n                        return val.company_name === companies[x];\r\n\r\n                    }\r\n                );\r\n\r\n                let total = 0.00;\r\n                for( let x = 0; x < arr.length; x++ )\r\n                {\r\n\r\n                    total = total + parseFloat( arr[x].total );\r\n\r\n                }\r\n\r\n                data.push(\r\n                    {\r\n                        company: companies[x],\r\n                        count: arr.length,\r\n                        total: total\r\n                    }\r\n                )\r\n            }\r\n\r\n            setRequestsSplit( data );\r\n\r\n            let total = 0.00;\r\n            for( let x = 0; x < props.ViewRequest.length; x++ )\r\n            {\r\n\r\n                total = total + parseFloat( props.ViewRequest[x].total );\r\n\r\n            }\r\n\r\n            setTotalValue( total );\r\n\r\n        }, [ props.ViewRequest ]\r\n    )\r\n\r\n    useEffect(\r\n        () => {\r\n\r\n            setEmpData( props.EmpData );\r\n\r\n        }, [ props.EmpData ]\r\n    )\r\n\r\n    useEffect(\r\n        () => {\r\n\r\n            ReactTooltip.rebuild();\r\n\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div className=\"Home\">\r\n            <ReactTooltip />\r\n            <div className=\"three\">\r\n                <div className=\"Calculate px-4\">\r\n                    <small className=\"text-secondary\">Total Requests</small>\r\n                    <h3 className=\"font-weight-bolder\">\r\n                        {props.CountRequests} <small className=\"text-secondary\">Received</small>\r\n                    </h3>\r\n                    {\r\n                        Object.keys(EmpData).length === 0\r\n                        ?\r\n                        null\r\n                        :\r\n                        EmpData.access ? JSON.parse(EmpData.access).includes(522) || JSON.parse(EmpData.access).includes(1)\r\n                        ?\r\n                            <>\r\n                                <small className=\"text-secondary\">Total Value Rs</small>\r\n                                <h3 className=\"font-weight-bolder\">\r\n                                    { TotalValue.toLocaleString('en-US') } <small className=\"text-secondary\">Estimated</small>\r\n                                </h3>\r\n                            </>\r\n                            :\r\n                            null\r\n                        :\r\n                        null\r\n                    }\r\n                </div>\r\n                <div className=\"RequestStatusChart\">\r\n                    <Pie\r\n                        width='100%'\r\n                        height='100px'\r\n                        data={ChartData}\r\n                    />\r\n                </div>\r\n                <div className=\"RequestStatusChart py-4 px-3\">\r\n                    {\r\n                        RequestsSplit.map(\r\n                            ( val, index ) => {\r\n\r\n                                return (\r\n                                    <div \r\n                                        className=\" mb-3\"\r\n                                        style={\r\n                                            {\r\n                                                fontSize: '13px'\r\n                                            }\r\n                                        }\r\n                                        key={ index }\r\n                                    >\r\n                                        <div className=\"font-weight-bold\">\r\n                                            {\r\n                                                val.company\r\n                                            }: \r\n                                        </div>\r\n                                        <div className=\"d-flex align-items-center justify-content-between\"> \r\n                                            <div>\r\n                                                {\r\n                                                    val.count\r\n                                                } <sub>Requests</sub>\r\n                                            </div>\r\n                                            <div>\r\n                                                PKR \r\n                                                <span className=\"ml-2\">\r\n                                                    {\r\n                                                        val.total.toLocaleString('en-US')\r\n                                                    } /-\r\n                                                </span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n\r\n                            }\r\n                        )\r\n                    }\r\n                </div>\r\n            </div>\r\n            {/* <div className=\"graph\">\r\n                <div className='Heading'> <h4> Monthly Requests </h4> </div>\r\n                {\r\n                    MonthlyRequests.map(\r\n                        (val, index) => {\r\n\r\n                            let totalCount = 0;\r\n                            for (let x = 0; x < MonthlyRequests.length; x++) {\r\n                                totalCount = totalCount + MonthlyRequests[x].count;\r\n                            }\r\n\r\n                            let percent = (val.count / totalCount) * 85;\r\n\r\n                            return (\r\n                                <div\r\n                                    style={\r\n                                        {\r\n                                            height: percent + '%'\r\n                                        }\r\n                                    }\r\n                                    className='GraphItem'\r\n                                    data-tip={val.month + ' ' + val.year} key={index}\r\n                                >\r\n                                    <div> {val.count} </div>\r\n                                </div>\r\n                            )\r\n\r\n                        }\r\n                    )\r\n                }\r\n            </div> */}\r\n            <div className=\"ViewPrRequests_graph\">\r\n                <div className=\"border-bottom mb-3\"><h4>Monthly Requests</h4></div>\r\n                <div className=\"d-flex\">\r\n                    <div style={{ display: \"grid\", marginRight: \"10px\" }} >\r\n                        <p className=\"font-weight-bolder\">{Math.max(...MinMax)}</p>\r\n                        <p className=\"d-flex align-items-end font-weight-bolder\">{Math.min(...MinMax)}</p>\r\n                    </div>\r\n                    <div className=\"ViewPrRequests_graphdiv\">\r\n                        <div className=\"graph_data \">\r\n                            <div className=\"Graph_Bargrid\">\r\n                                {\r\n                                    MonthlyRequests.map(\r\n                                        (val, index) => {\r\n\r\n                                            let totalCount = 0;\r\n\r\n                                            for (let x = 0; x < MonthlyRequests.length; x++) {\r\n                                                totalCount = totalCount + MonthlyRequests[x].count;\r\n                                            }\r\n\r\n                                            let percent = (val.count / totalCount) * 100;\r\n\r\n                                            return (\r\n                                                <>\r\n                                                    <div key={ index } className=\"graphbar\" style={{ height: percent + '%' }}>\r\n                                                        <div className=\"tooltip\">{val.count} Requests</div>\r\n                                                    </div>\r\n                                                </>\r\n                                            )\r\n                                        }\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"Graph_monthgrid\">\r\n                                {\r\n                                     MonthlyRequests.map(\r\n                                        (val, index) => {\r\n\r\n                                            return (\r\n                                                <>\r\n                                                    <div key={ index }>{val.month}</div>\r\n                                                </>\r\n                                            )\r\n                                        }\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"graphyear\">\r\n                    2022\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}